
pink@jeanleonvoutlook.onmicrosoft.com
Goma162751



* azure

- create app registration in azure for the client app
- create app registration in azure for the api app
- set owner for all apps
- create new scope in "expose api" in api app ("Items.Read") as delegated so the client app will be able to access the api on behalf of the signed in user
- add that scope to the "api permissions" in client app
- You need to add the specific scope as an api permission in client app so the app request protected api endpoints using the token acquired by the signed in user in the client



* create angular app

- npm install @azure/msal-angular @azure/msal-browser
- add auth-config.ts and export relevant data
- update app.config.ts, add msal services and import the appMsalInstance,
- initialize msal in main wraping the bootstrap of the application
- add login and logout using msal instance, using loginPopup method
- add the if-else logic to the home template so the authenticated user will appear when the user sign in
- create the item-list-component, and add the logic to acquire the access token using the msal instance of the app (the authenticated user)
- add the loig to call the items api so the component can fetch the items
- add to template the returned items


* create asp.net core webapi using dotnet cli

- install azure auth packages
- dotnet add package Microsoft.Identity.Web
- dotnet add package Microsoft.AspNetCore.Authentication.JwtBearer
- add AzureAd section in appsettings.json with app registration information
- set up the project (add controllers, item entity)
- add cors policies
- add authentication and authorization using azuread configuration, you have to specify the audience, and set up the cors
- in authorization yoy can add policies  based on scopes, so you can restrict the endpoints using policies (this is using scopes, allow granularity, they're like permissions)









* create react app

Don't mark the ID Token option to use the Authorization code PKCE flow instead implicit flow

npm install react@18 react-dom@18
npx create-react-app full-app-client
npm install @azure/msal-browser @azure/msal-react

set up auth config (azure data and scopes)
instantiate and export PublicClientApplication using azure data, define the msalinstance for all the app and use it in the MsalProvider to wrap the app in index.js
add login and logout logic using msal instance from package using loginRedirect and logoutRedirect methods. The login logic uses the scopes defined in auth config

you have to add the scopes required for all the requests called from the client to the backend api

